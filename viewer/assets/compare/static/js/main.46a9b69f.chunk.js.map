{"version":3,"sources":["core/apiCalls.tsx","core/utils.tsx","components/ImagePopover.tsx","components/ResultsTable.tsx","components/AlgorithmSelect.tsx","components/ArchiveMultiSelect.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["simpleString","a","query","fetch","credentials","response","json","getArchivesInfo","pkList","currentSearch","archives","newParams","qs","stringify","indices","algos","pk","getLiveThumbnail","position","fetchFull","text","fileSizeIEC","bytes","exp","Math","log","result","toFixed","scopePriorities","sortTags","tagList","prioritizedTagList","forEach","x","matchedTags","filter","y","startsWith","map","z","replace","sort","length","push","remainingTags","find","ImagePopover","imageRenderer","buttonContent","React","useState","isPopoverOpen","setIsPopoverOpen","isLoading","setIsLoading","image","setImage","useEffect","then","content","Popover","isOpen","padding","positions","childRect","popoverRect","arrowColor","arrowSize","arrowStyle","opacity","className","arrowClassName","Spinner","color","type","onClick","getFinalHashClass","staticInfo","extraInfo","current","highlight","other","getDateFromUnixString","uniDate","moment","unix","format","ResultsTable","data","loading","showMatchesOnly","showNonMatchesOnly","Map","setExtraInfo","setStaticInfo","staticArchiveInfo","setStaticArchiveInfo","calculateSimilar","useCallback","newStatic","newStaticArchiveInfo","Object","keys","algorithm","images","archivePk","localArchiveInfo","matchedImages","imagePk","otherArchives","aPk","iPk","archive","key","JSON","set","archiveKey","initializeOtherInfo","newExtra","highlightSimilar","similarKey","similarImages","get","currentExtra","undefined","v","currentInfo","getMatches","getAdditionalInfo","currentArchiveInfo","getImageData","imageBase64","alt","src","bordered","size","colSpan","id","toString","Media","left","thumbnail","title","body","heading","href","url","filecount","filesize","create_date","public_date","posted","tags","tagGroup","Container","Row","tag","hashKey","currentStaticInfo","cx","onMouseEnter","onMouseLeave","customStyles","menu","provided","state","selectProps","menuColor","AlgorithmSelect","algorithms","availableAlgorithms","selectOption","value","label","isClearable","isDisabled","isMulti","onChange","entries","options","noOptionsMessage","placeholder","styles","ArchiveMultiSelect","setValue","setLoading","backspaceRemovesValue","getOptionLabel","e","getOptionValue","loadOptions","inputValue","results","getArchiveSimpleList","onInputChange","entry","App","resultData","setResultData","setAlgorithms","setArchives","archivesExtended","setArchivesExtended","MatchesOnly","NonMatchesOnly","matchModes","setMatchModes","fetchImageFull","setFetchImageFull","error","setError","fetchData","getCompareArchivesInfo","catch","message","startingAlgos","startingArchives","currentSearchParams","parse","window","location","search","ignoreQueryPrefix","Array","isArray","startingMatchModes","matchesOnly","nonMatchesOnly","fetchInitialData","fetchExtendedData","pks","FormGroup","Label","CustomInput","checked","event","target","inline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46a9b69f.chunk.js","sourcesContent":["import qs from \"qs\";\r\nimport {\r\n  ArchiveExtendedInfo,\r\n  ArchiveSimpleInfo, ResultsContainer\r\n} from \"../types\";\r\n\r\nexport async function getArchiveSimpleList(simpleString: string): Promise<ArchiveSimpleInfo[]> {\r\n  const query = `/es-title-pk-suggest/?q=${simpleString}`;\r\n  const response = await fetch(query,\r\n    {\r\n      credentials: 'include',\r\n    });\r\n  return await response.json();\r\n}\r\n\r\nexport async function getArchivesInfo(pkList: string[]): Promise<ArchiveExtendedInfo[]> {\r\n  const currentSearch = {\r\n    archives: pkList,\r\n  }\r\n  const newParams = qs.stringify(currentSearch, { indices: false });\r\n  const query = `/api/?${newParams}`;\r\n  const response = await fetch(query,\r\n    {\r\n      credentials: 'include',\r\n    });\r\n  return await response.json();\r\n}\r\n\r\nexport async function getCompareArchivesInfo(algos: string[], pkList: string[]): Promise<ResultsContainer> {\r\n  const currentSearch = {\r\n    algos: algos,\r\n    pk: pkList,\r\n  }\r\n  const newParams = qs.stringify(currentSearch, { indices: false });\r\n  const query = `/compare-archives/?${newParams}`;\r\n  const response = await fetch(query,\r\n    {\r\n      credentials: 'include',\r\n    });\r\n  return await response.json();\r\n}\r\n\r\nexport async function getLiveThumbnail(pk: string, position: string, fetchFull: boolean): Promise<string> {\r\n  const query = `/live-image-thumbnail/${pk}/${position}/?base64=1&full=${fetchFull ? '1' : ''}`;\r\n  const response = await fetch(query,\r\n    {\r\n      credentials: 'include',\r\n    });\r\n  return await response.text();\r\n}","export function fileSizeIEC(bytes: number): string {\r\n  const exp = Math.log(bytes) / Math.log(1024) | 0;\r\n  const result = (bytes / (1024 ** exp)).toFixed(2);\r\n\r\n  return `${result} ${(exp === 0 ? 'bytes' : `${'KMGTPEZY'[exp - 1]}B`)}`;\r\n}\r\n// KiB,MiB,GiB,TiB,PiB,EiB,ZiB,YiB\r\n\r\nconst scopePriorities = ['language', 'artist', 'group', 'parody', 'character', 'female', 'male', 'mixed', 'other', 'misc'];\r\n\r\ntype sortedTagListType = [\r\n  string,\r\n  string[]\r\n]\r\n\r\nexport function sortTags(tagList: string[]): sortedTagListType[] {\r\n  const prioritizedTagList: sortedTagListType[] = [];\r\n\r\n  scopePriorities.forEach((x) => {\r\n    const matchedTags: string[] = tagList.filter(y => y.startsWith(`${x}:`)).map(z => z.replace(`${x}:`, '')).sort();\r\n    if (matchedTags.length > 0) {\r\n      prioritizedTagList.push([x, matchedTags] as sortedTagListType);\r\n    }\r\n  });\r\n  const remainingTags: string[] = tagList.filter(y => !scopePriorities.find(z => y.startsWith(`${z}:`))).sort();\r\n  if (remainingTags.length > 0) {\r\n    prioritizedTagList.push(['', remainingTags] as sortedTagListType);\r\n  }\r\n\r\n  return prioritizedTagList;\r\n}\r\n","import React from 'react';\r\nimport {ArrowContainer, Popover} from 'react-tiny-popover';\r\nimport {Spinner} from \"reactstrap\";\r\n\r\ntype Props = {\r\n  imageRenderer: () => Promise<JSX.Element>;\r\n  buttonContent: string;\r\n}\r\n\r\nfunction ImagePopover({ imageRenderer, buttonContent }: Props): JSX.Element {\r\n  const [isPopoverOpen, setIsPopoverOpen] = React.useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [image, setImage] = React.useState<JSX.Element>();\r\n  React.useEffect(() => {\r\n    if(isPopoverOpen && !image) {\r\n      setIsLoading(true);\r\n      imageRenderer().then(\r\n        (content) => {\r\n          setImage(content);\r\n          setIsLoading(false);\r\n        }\r\n      )\r\n    }\r\n  }, [image, imageRenderer, isPopoverOpen])\r\n  return (\r\n    <Popover\r\n      isOpen={isPopoverOpen}\r\n      padding={5}\r\n      positions={['right', 'left', 'bottom', 'top' ]}\r\n      content={({ position, childRect, popoverRect }) => (\r\n        <ArrowContainer\r\n          position={position}\r\n          childRect={childRect}\r\n          popoverRect={popoverRect}\r\n          arrowColor={'green'}\r\n          arrowSize={10}\r\n          arrowStyle={{ opacity: 1.0 }}\r\n          className='popover-arrow-container'\r\n          arrowClassName='popover-arrow'\r\n        >\r\n          {!isLoading && image ? image : <Spinner color=\"primary\" />}\r\n        </ArrowContainer>\r\n      )}\r\n    >\r\n      <button type=\"button\" className=\"btn btn-primary btn-sm\" onClick={() => setIsPopoverOpen(!isPopoverOpen)}>\r\n        {buttonContent}\r\n      </button>\r\n    </Popover>\r\n  );\r\n}\r\n\r\nexport default ImagePopover;","import React from 'react'\r\nimport {Container, Media, Row, Table as BTable} from 'reactstrap';\r\nimport cx from 'classnames';\r\nimport moment from 'moment';\r\nimport {ArchiveExtendedInfo, Results} from \"../types\";\r\nimport './ResultsTable.css';\r\nimport {fileSizeIEC, sortTags} from \"../core/utils\";\r\nimport {getLiveThumbnail} from \"../core/apiCalls\";\r\nimport ImagePopover from \"./ImagePopover\";\r\n\r\n\r\ninterface Table {\r\n  data: Results;\r\n  archives: ArchiveExtendedInfo[];\r\n  loading: boolean;\r\n  showMatchesOnly: boolean;\r\n  showNonMatchesOnly: boolean;\r\n  fetchFull: boolean;\r\n}\r\n\r\ninterface SimilarInfo {\r\n  algorithm: string;\r\n  archive: string;\r\n  image: string;\r\n}\r\n\r\ninterface ExtraInfo {\r\n  current: boolean;\r\n  highlight: boolean;\r\n}\r\n\r\ninterface StaticInfo {\r\n  other: SimilarInfo[];\r\n}\r\n\r\ninterface ArchiveLevelInfo {\r\n  matchedImages: number;\r\n}\r\n\r\nconst getFinalHashClass = (staticInfo?: StaticInfo, extraInfo?: ExtraInfo) => {\r\n  if(extraInfo?.current) {\r\n    return 'current-highlight';\r\n  }\r\n  if(extraInfo?.highlight) {\r\n    return 'hash-highlight';\r\n  }\r\n  else if(staticInfo) {\r\n    if(staticInfo.other.length > 0) {\r\n      return 'hash-match';\r\n    }\r\n  }\r\n  return '';\r\n}\r\n\r\nconst getDateFromUnixString = (uniDate: number | null) => {\r\n  return uniDate ? moment.unix(uniDate).format('MM-DD-YYYY'): 'No';\r\n}\r\n\r\nexport default function ResultsTable({data, archives, loading, showMatchesOnly, showNonMatchesOnly, fetchFull}: Table) {\r\n\r\n  const [extraInfo, setExtraInfo] = React.useState<Map<string, ExtraInfo>>(new Map())\r\n  const [staticInfo, setStaticInfo] = React.useState<Map<string, StaticInfo>>(new Map())\r\n  const [staticArchiveInfo, setStaticArchiveInfo] = React.useState<Map<string, ArchiveLevelInfo>>(new Map())\r\n\r\n  const calculateSimilar = React.useCallback(() => {\r\n    const newStatic = new Map<string, StaticInfo>();\r\n    const newStaticArchiveInfo = new Map<string, ArchiveLevelInfo>();\r\n    Object.keys(data).forEach((algorithm) => (\r\n      Object.keys(data[algorithm].images).forEach((archivePk) => {\r\n        const localArchiveInfo = {matchedImages: 0};\r\n        Object.keys(data[algorithm].images[archivePk]).forEach((imagePk) => {\r\n          const otherArchives: SimilarInfo[] = [];\r\n          Object.keys(data[algorithm].images).filter(pk => pk !== archivePk).forEach(\r\n            (aPk) => {\r\n              Object.keys(data[algorithm].images[aPk])\r\n                .filter(iPk => data[algorithm].images[aPk][iPk] === data[algorithm].images[archivePk][imagePk])\r\n                .forEach(a => (otherArchives.push({algorithm: algorithm, archive: aPk, image: a})))\r\n            }\r\n          );\r\n          if (otherArchives.length > 0) {\r\n            const key = JSON.stringify({algorithm: algorithm, archive: archivePk, image: imagePk});\r\n            newStatic.set(key, {other: otherArchives});\r\n          }\r\n          localArchiveInfo.matchedImages += otherArchives.length;\r\n        });\r\n        const archiveKey = JSON.stringify({algorithm: algorithm, archive: archivePk});\r\n        newStaticArchiveInfo.set(archiveKey, localArchiveInfo);\r\n      })\r\n    ));\r\n    setStaticInfo(newStatic);\r\n    setStaticArchiveInfo(newStaticArchiveInfo);\r\n  }, [data]);\r\n\r\n  const initializeOtherInfo = React.useCallback(() => {\r\n    const newExtra = new Map<string, ExtraInfo>();\r\n    Object.keys(data).forEach((algorithm) => (\r\n      Object.keys(data[algorithm].images).forEach((archivePk) => (\r\n        Object.keys(data[algorithm].images[archivePk]).forEach((imagePk) => {\r\n          const key = JSON.stringify({algorithm: algorithm, archive: archivePk, image: imagePk})\r\n          newExtra.set(key, {current: false, highlight: false});\r\n        })\r\n      ))\r\n    ));\r\n    setExtraInfo(newExtra);\r\n  }, [data]);\r\n  \r\n  React.useEffect(() => {\r\n    calculateSimilar()\r\n  }, [calculateSimilar, data])\r\n\r\n  React.useEffect(() => {\r\n    initializeOtherInfo()\r\n  }, [initializeOtherInfo, data])\r\n\r\n  const highlightSimilar = (similarKey: string, highlight: boolean) => {\r\n    const similarImages = staticInfo.get(similarKey);\r\n    const currentExtra = extraInfo.get(similarKey);\r\n    if(currentExtra === undefined) {\r\n      extraInfo.set(similarKey, {current: highlight, highlight: false});\r\n    }\r\n    else {\r\n      currentExtra.highlight = false;\r\n      currentExtra.current = highlight;\r\n      extraInfo.set(similarKey, currentExtra);\r\n    }\r\n\r\n    if(similarImages) {\r\n      similarImages.other.forEach(\r\n        v => {\r\n          const key = JSON.stringify(v);\r\n          const currentInfo = extraInfo.get(key);\r\n          if(currentInfo === undefined) {\r\n            extraInfo.set(key, {current: false, highlight: highlight});\r\n          }\r\n          else {\r\n            currentInfo.highlight = highlight;\r\n            currentInfo.current = false;\r\n            extraInfo.set(key, currentInfo);\r\n          }\r\n        }\r\n      )\r\n      \r\n    }\r\n\r\n    setExtraInfo(new Map(extraInfo));\r\n\r\n  }\r\n\r\n  const getMatches = (staticInfo?: StaticInfo) => {\r\n    if(staticInfo) {\r\n      return staticInfo.other.map(\r\n        v => {\r\n          return <span className={\"mr-1\"} key={`${v.archive}-${v.image}`}>{`A: ${v.archive}, I: ${v.image}`}</span>;\r\n        }\r\n      );\r\n    }\r\n    return [];\r\n  }\r\n\r\n  const getAdditionalInfo = (key: string) => {\r\n    const currentArchiveInfo = staticArchiveInfo.get(key);\r\n    if(currentArchiveInfo) {\r\n      return currentArchiveInfo.matchedImages;\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  const getImageData = async (archivePk: string, imagePk: string, fetchFull: boolean) => {\r\n    const imageBase64 = await getLiveThumbnail(archivePk, imagePk, fetchFull);\r\n    return <img alt={imagePk} src={`${imageBase64}`}/>;\r\n  }\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      {\r\n        loading ? <div className=\"text-center\">Loading results, might take a while depending on algorithm...</div> :\r\n          <BTable bordered size=\"sm\" className={\"results-table\"}>\r\n            <thead>\r\n            <tr>\r\n              {Object.keys(data).map(algorithm => (\r\n                <th className=\"text-center\" colSpan={Object.keys(data[algorithm].images).length} key={algorithm}>\r\n                  {algorithm}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n            <tr>\r\n              {Object.keys(data).map(algorithm => (\r\n                Object.keys(data[algorithm].images).map(archivePk => {\r\n                  const localArchiveInfo = archives.find(a => a.id.toString() === archivePk);\r\n                  if (localArchiveInfo) {\r\n                    return <th key={archivePk} className={\"mid-content\"}>\r\n                      <Media>\r\n                        <Media left className={\"mr-2\"}>\r\n                          {\r\n                            localArchiveInfo.thumbnail ?\r\n                              <img src={localArchiveInfo.thumbnail} alt={localArchiveInfo.title}/> : null\r\n                          }\r\n                        </Media>\r\n                        <Media body>\r\n                          <Media heading>\r\n                            {localArchiveInfo.title}\r\n                          </Media>\r\n                          <div>\r\n                            {\"Link: \"}<a href={localArchiveInfo.url}>{`/archive/${archivePk}/`}</a>{\" | \"}\r\n                            {`Images: ${localArchiveInfo.filecount}`}{\" | \"}\r\n                            {`Size: ${fileSizeIEC(localArchiveInfo.filesize)}`}{\" | \"}\r\n                            {`Matches: ${getAdditionalInfo(JSON.stringify({algorithm: algorithm, archive: archivePk}))}`}\r\n                          </div>\r\n                          <div>\r\n                            {`Added: ${getDateFromUnixString(localArchiveInfo.create_date ? localArchiveInfo.create_date : localArchiveInfo.public_date)}`}{\" | \"}\r\n                            {`Posted: ${getDateFromUnixString(localArchiveInfo.posted)}`}{\" | \"}\r\n                            {`Public: ${getDateFromUnixString(localArchiveInfo.public_date)}`}\r\n                          </div>\r\n                          <div>\r\n                            {\r\n                              sortTags(localArchiveInfo.tags).map(\r\n                                tagGroup => <div key={tagGroup[0]}>\r\n                                  <Container>\r\n                                    <Row>\r\n                                      {tagGroup[0] ? <div className={\"mr-1\"}>{tagGroup[0] + ':'}</div> : ''}\r\n                                      {\r\n                                        tagGroup[1].map(\r\n                                          tag =>\r\n                                            <div className={\"tag-element mr-1\"} key={tag}>{tag}</div>\r\n                                        )\r\n                                      }\r\n                                    </Row>\r\n                                  </Container>\r\n                                  </div>\r\n                              )\r\n                            }\r\n                          </div>\r\n                        </Media>\r\n                      </Media>\r\n                    </th>;\r\n                  }\r\n                  else {\r\n                    return null;\r\n                  }\r\n              })\r\n              ))}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            <tr>\r\n              {Object.keys(data).map(algorithm => (\r\n                Object.keys(data[algorithm].images).map(archivePk => (\r\n                  <td key={archivePk} className={\"shaCell\"}>\r\n                    {\r\n                      <ul className=\"list-group\">\r\n                        {\r\n                          Object.keys(data[algorithm].images[archivePk]).map(imagePk => {\r\n                            const hashKey = JSON.stringify({algorithm: algorithm, archive: archivePk, image: imagePk});\r\n                            const currentStaticInfo = staticInfo.get(hashKey);\r\n                            if(\r\n                              (!showMatchesOnly || (currentStaticInfo && currentStaticInfo.other.length > 0)) &&\r\n                              (!showNonMatchesOnly || (currentStaticInfo === undefined || currentStaticInfo.other.length === 0))\r\n                            ) {\r\n                              return <li\r\n                                className={cx(\"list-group-item\", getFinalHashClass(currentStaticInfo, extraInfo.get(hashKey)))}\r\n                                key={imagePk}\r\n                                onMouseEnter={() => highlightSimilar(hashKey, true)}\r\n                                onMouseLeave={() => highlightSimilar(hashKey, false)}\r\n                              >\r\n                                <ImagePopover buttonContent={imagePk} imageRenderer={() => getImageData(archivePk, imagePk, fetchFull)}/>\r\n                                {': '}<span>{data[algorithm].images[archivePk][imagePk]}</span>\r\n                                {\r\n                                  currentStaticInfo && currentStaticInfo.other.length > 0 ?\r\n                                    <span>{' > '} {getMatches(currentStaticInfo)}</span> : ''\r\n                                }\r\n                              </li>\r\n                            }\r\n                            else {\r\n                              return null;\r\n                            }\r\n\r\n                          }).filter(x => x != null)\r\n                        }\r\n                      </ul>\r\n                    }\r\n                  </td>\r\n                ))\r\n              ))}\r\n            </tr>\r\n            </tbody>\r\n          </BTable>\r\n      }\r\n  </>\r\n  )\r\n}","import React from 'react';\r\nimport ReactSelect from \"react-select\";\r\n\r\ntype HeaderProps = {\r\n  algorithms: string[];\r\n  availableAlgorithms: string[];\r\n  selectOption: (algorithms: string[]) => void;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst customStyles = {\r\n  menu: (provided: any, state: any) => ({\r\n    ...provided,\r\n    color: state.selectProps.menuColor,\r\n  }),\r\n}\r\n\r\nfunction AlgorithmSelect({ algorithms, availableAlgorithms, selectOption, isLoading }: HeaderProps): JSX.Element {\r\n  return (\r\n    <ReactSelect\r\n      value={algorithms.map(a => ({ value: a, label: a }))}\r\n      isClearable\r\n      isDisabled={isLoading}\r\n      isMulti\r\n      onChange={entries => {\r\n        selectOption(entries.map(a => (a.value)));\r\n      }}\r\n      options={availableAlgorithms.map(a => ({ value: a, label: a }))}\r\n      noOptionsMessage={() => null}\r\n      placeholder={\"Choose Algorithms...\"}\r\n      // @ts-ignore\r\n      menuColor='black'\r\n      styles={customStyles}\r\n    />\r\n  );\r\n}\r\n\r\nexport default AlgorithmSelect;","import React, {useState} from 'react';\r\nimport AsyncSelect from 'react-select/async';\r\nimport \"./ArchiveMultiSelect.css\";\r\nimport {getArchiveSimpleList} from \"../core/apiCalls\";\r\nimport {ArchiveSimpleInfo} from \"../types\";\r\n\r\ntype HeaderProps = {\r\n  isLoading: boolean;\r\n  archives: ArchiveSimpleInfo[];\r\n  selectOption: (archives: ArchiveSimpleInfo[]) => void;\r\n}\r\n\r\nconst customStyles = {\r\n  menu: (provided: any, state: any) => ({\r\n    ...provided,\r\n    color: state.selectProps.menuColor,\r\n  }),\r\n}\r\n\r\nfunction ArchiveMultiSelect({ archives, isLoading, selectOption }: HeaderProps): JSX.Element {\r\n  const [, setValue] = useState<string>('');\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  // handle input change event\r\n  const handleInputChange = (value: string) => {\r\n    setValue(value);\r\n  };\r\n\r\n  // load options using API call\r\n  const loadOptions = (inputValue: string) => {\r\n    setLoading(true);\r\n    const results = getArchiveSimpleList(inputValue);\r\n    setLoading(false);\r\n    return results;\r\n  };\r\n\r\n  return (\r\n    <AsyncSelect\r\n      // cacheOptions\r\n      isLoading={loading || isLoading}\r\n      isDisabled={loading || isLoading}\r\n      value={archives}\r\n      isClearable\r\n      isMulti\r\n      backspaceRemovesValue\r\n      getOptionLabel={(e: ArchiveSimpleInfo) => `${e.id}: ${e.title}`}\r\n      getOptionValue={(e: ArchiveSimpleInfo) => e.id}\r\n      loadOptions={loadOptions}\r\n      onInputChange={handleInputChange}\r\n      onChange={entries => {\r\n        selectOption(entries.map(entry => (entry)));\r\n      }}\r\n      noOptionsMessage={() => null}\r\n      placeholder={\"Choose Archives...\"}\r\n      // @ts-ignore\r\n      menuColor='black'\r\n      styles={customStyles}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ArchiveMultiSelect;","import React from 'react';\r\nimport qs from \"qs\";\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport {Results, fetchDataParams, ResultsContainer, ArchiveSimpleInfo, ArchiveExtendedInfo} from \"./types\";\r\nimport {getArchivesInfo, getCompareArchivesInfo} from \"./core/apiCalls\";\r\nimport ResultsTable from \"./components/ResultsTable\";\r\nimport AlgorithmSelect from \"./components/AlgorithmSelect\";\r\nimport ArchiveMultiSelect from \"./components/ArchiveMultiSelect\";\r\nimport {CustomInput, FormGroup, Label} from \"reactstrap\";\r\n\r\ninterface MatchModes {\r\n  MatchesOnly: boolean;\r\n  NonMatchesOnly: boolean;\r\n}\r\n\r\nfunction App() {\r\n\r\n  const availableAlgorithms = [\r\n    'sha1',\r\n    'phash',\r\n    'ahash',\r\n    'dhash',\r\n    'whash-haar',\r\n    'whash-db4',\r\n    'colorhash',\r\n  ]\r\n\r\n  const [resultData, setResultData] = React.useState<Results>({})\r\n  const [algorithms, setAlgorithms] = React.useState<string[]>([])\r\n  const [archives, setArchives] = React.useState<ArchiveSimpleInfo[]>([])\r\n  const [archivesExtended, setArchivesExtended] = React.useState<ArchiveExtendedInfo[]>([])\r\n  const [matchModes, setMatchModes] = React.useState<MatchModes>({MatchesOnly: false, NonMatchesOnly: false})\r\n  const [fetchImageFull, setFetchImageFull] = React.useState<boolean>(false)\r\n  const [loading, setLoading] = React.useState(false)\r\n  const [error, setError] = React.useState('')\r\n\r\n  const fetchInitialData = () => {\r\n\r\n    const currentSearchParams = qs.parse(window.location.search, { ignoreQueryPrefix: true });\r\n\r\n    let startingAlgos;\r\n    if(currentSearchParams.algos !== undefined) {\r\n      if(Array.isArray(currentSearchParams.algos)) {\r\n        startingAlgos = currentSearchParams.algos.map(a => a.toString());\r\n      }\r\n      else if(typeof currentSearchParams.algos === 'string') {\r\n        startingAlgos = [currentSearchParams.algos];\r\n      }\r\n      else {\r\n        startingAlgos = ['sha1']\r\n      }\r\n    }\r\n    else {\r\n      startingAlgos = ['sha1']\r\n    }\r\n\r\n    setAlgorithms(startingAlgos);\r\n\r\n    let startingArchives: string[];\r\n    if(currentSearchParams.archives !== undefined) {\r\n      if(Array.isArray(currentSearchParams.archives)) {\r\n        startingArchives = currentSearchParams.archives.map(a => a.toString());\r\n      }\r\n      else if(typeof currentSearchParams.archives === 'string') {\r\n        startingArchives = [currentSearchParams.archives];\r\n      }\r\n      else {\r\n        startingArchives = []\r\n      }\r\n    }\r\n    else {\r\n      startingArchives = []\r\n    }\r\n\r\n    const startingMatchModes: MatchModes = {\r\n      MatchesOnly: false,\r\n      NonMatchesOnly: false\r\n    }\r\n\r\n    if(currentSearchParams.matchesOnly !== undefined) {\r\n      startingMatchModes.MatchesOnly = true;\r\n    }\r\n\r\n    if(currentSearchParams.nonMatchesOnly !== undefined) {\r\n      startingMatchModes.NonMatchesOnly = true;\r\n    }\r\n\r\n    setMatchModes(startingMatchModes);\r\n\r\n    if(currentSearchParams.fetchFull !== undefined) {\r\n      setFetchImageFull(true);\r\n    }\r\n\r\n    if (startingAlgos.length < 1 || startingArchives.length < 1) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    getArchivesInfo(\r\n      startingArchives\r\n    )\r\n      .then((data: ArchiveExtendedInfo[]) => {\r\n        setArchives(data);\r\n        setArchivesExtended(data);\r\n        setLoading(false);\r\n        setError('');\r\n      })\r\n      .catch(error => {\r\n        setLoading(false);\r\n        setError(error.message);\r\n      });\r\n\r\n  }\r\n\r\n  const fetchData = React.useCallback(({ algos, pk }: fetchDataParams) => {\r\n\r\n    if (algos.length < 1 || pk.length < 1) {\r\n      setResultData({});\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    getCompareArchivesInfo(algos, pk)\r\n      .then((data: ResultsContainer) => {\r\n        setResultData(data.results);\r\n        setLoading(false);\r\n        setError('');\r\n      })\r\n      .catch(error => {\r\n        setLoading(false);\r\n        setError(error.message);\r\n      });\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    fetchInitialData()\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    fetchData({ algos: algorithms, pk: archives.map(a => (a.id)) })\r\n  }, [algorithms, archives, fetchData])\r\n\r\n  const fetchExtendedData = React.useCallback((pks: string[]) => {\r\n\r\n    if (pks.length < 1) {\r\n      setArchivesExtended([]);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    getArchivesInfo(\r\n      pks\r\n    )\r\n      .then((data: ArchiveExtendedInfo[]) => {\r\n        setArchivesExtended(data);\r\n        setLoading(false);\r\n        setError('');\r\n      })\r\n      .catch(error => {\r\n        setLoading(false);\r\n        setError(error.message);\r\n      });\r\n  }, [])\r\n\r\n  // React.useEffect(() => {\r\n  //   fetchExtendedData(archives.map(a => (a.id)))\r\n  // }, [archives, fetchExtendedData])\r\n\r\n  const handleArchivesChosen = (archives: ArchiveSimpleInfo[]) => {\r\n    setArchives(archives);\r\n    fetchExtendedData(archives.map(a => (a.id)));\r\n  }\r\n\r\n  const handleAlgorithmsChange = (algorithms: string[]) => {\r\n    setAlgorithms(algorithms);\r\n  }\r\n\r\n  const handleMatchesOnlyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    matchModes.MatchesOnly = event.target.checked;\r\n    if(event.target.checked) {\r\n      matchModes.NonMatchesOnly = !event.target.checked;\r\n    }\r\n    setMatchModes({...matchModes});\r\n  }\r\n\r\n  const handleNonMatchesOnlyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if(event.target.checked) {\r\n      matchModes.MatchesOnly = !event.target.checked;\r\n    }\r\n    matchModes.NonMatchesOnly = event.target.checked;\r\n    setMatchModes({...matchModes});\r\n  }\r\n\r\n  const handleFetchFull = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFetchImageFull(event.target.checked);\r\n  }\r\n\r\n  return (\r\n    <main className=\"App\">\r\n      <div>\r\n        <ArchiveMultiSelect archives={archives} selectOption={handleArchivesChosen} isLoading={loading} />\r\n        <AlgorithmSelect\r\n          algorithms={algorithms}\r\n          selectOption={handleAlgorithmsChange}\r\n          availableAlgorithms={availableAlgorithms}\r\n          isLoading={loading}\r\n        />\r\n        {\r\n          error ? <div className=\"text-center\">{error}</div> : null\r\n        }\r\n        <FormGroup>\r\n          <Label>Options</Label>\r\n          <div>\r\n            <CustomInput\r\n              type=\"switch\"\r\n              label=\"Show Matches Only\"\r\n              checked={matchModes.MatchesOnly}\r\n              onChange={handleMatchesOnlyChange}\r\n              id=\"matchesOnly\"\r\n              inline\r\n            />\r\n            <CustomInput\r\n              type=\"switch\"\r\n              label=\"Show Non-Matches Only\"\r\n              checked={matchModes.NonMatchesOnly}\r\n              onChange={handleNonMatchesOnlyChange}\r\n              id=\"nonMatchesOnly\"\r\n              inline\r\n            />\r\n            <CustomInput\r\n              type=\"switch\"\r\n              label=\"Fetch Full Images\"\r\n              checked={fetchImageFull}\r\n              onChange={handleFetchFull}\r\n              id=\"fetchFull\"\r\n              inline\r\n            />\r\n          </div>\r\n        </FormGroup>\r\n        <ResultsTable\r\n          data={resultData}\r\n          archives={archivesExtended}\r\n          loading={loading}\r\n          showMatchesOnly={matchModes.MatchesOnly}\r\n          showNonMatchesOnly={matchModes.NonMatchesOnly}\r\n          fetchFull={fetchImageFull}/>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}