{"version":3,"sources":["core/apiCalls.tsx","core/utils.tsx","components/ImagePopover.tsx","components/ResultsTable.tsx","components/AlgorithmSelect.tsx","components/ArchiveMultiSelect.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["simpleString","a","query","fetch","credentials","response","json","getArchivesInfo","pkList","currentSearch","archives","newParams","qs","stringify","indices","algos","pk","getLiveThumbnail","position","fetchFull","text","fileSizeIEC","bytes","exp","Math","log","result","toFixed","scopePriorities","sortTags","tagList","prioritizedTagList","forEach","x","matchedTags","filter","y","startsWith","map","z","replace","sort","length","push","remainingTags","find","ImagePopover","imageRenderer","buttonContent","React","useState","isPopoverOpen","setIsPopoverOpen","isLoading","setIsLoading","image","setImage","useEffect","then","content","Popover","isOpen","padding","positions","childRect","popoverRect","arrowColor","arrowSize","arrowStyle","opacity","className","arrowClassName","Spinner","color","type","onClick","getFinalHashClass","staticInfo","extraInfo","current","highlight","other","getDateFromUnixString","uniDate","moment","unix","format","ResultsTable","data","loading","showMatchesOnly","showNonMatchesOnly","showImagesOnTop","handleAddImage","Map","setExtraInfo","setStaticInfo","staticArchiveInfo","setStaticArchiveInfo","calculateSimilar","useCallback","newStatic","newStaticArchiveInfo","Object","keys","algorithm","images","archivePk","localArchiveInfo","matchedImages","imagePk","otherArchives","aPk","iPk","archive","key","JSON","set","archiveKey","initializeOtherInfo","newExtra","highlightSimilar","similarKey","similarImages","get","currentExtra","undefined","v","currentInfo","getMatches","getAdditionalInfo","currentArchiveInfo","getImageData","imageBase64","alt","src","bordered","size","colSpan","id","toString","Media","left","thumbnail","title","body","heading","href","url","filecount","filesize","create_date","public_date","posted","tags","tagGroup","Container","Row","tag","hashKey","currentStaticInfo","cx","onMouseEnter","onMouseLeave","customStyles","menu","provided","state","selectProps","menuColor","AlgorithmSelect","algorithms","availableAlgorithms","selectOption","value","label","isClearable","isDisabled","isMulti","onChange","entries","options","noOptionsMessage","placeholder","styles","ArchiveMultiSelect","setValue","setLoading","backspaceRemovesValue","getOptionLabel","e","getOptionValue","loadOptions","inputValue","results","getArchiveSimpleList","onInputChange","entry","App","resultData","setResultData","setAlgorithms","setArchives","archivesExtended","setArchivesExtended","MatchesOnly","NonMatchesOnly","matchModes","setMatchModes","fetchImageFull","setFetchImageFull","imagesToCompare","setImagesToCompare","setImagesOnTop","showDifference","setShowDifference","comparedImage","setComparedImage","error","setError","fetchData","getCompareArchivesInfo","catch","message","startingAlgos","startingArchives","currentSearchParams","parse","window","location","search","ignoreQueryPrefix","Array","isArray","startingMatchModes","matchesOnly","nonMatchesOnly","showOnTop","fetchInitialData","fetchExtendedData","pks","reduceImagesToCompare","imageA","Image","props","imageB","onload","height","width","canvasA","document","createElement","contextA","getContext","canvasB","contextB","drawImage","imgDataA","imgDataB","imgDataOutput","ImageData","pixelmatch","threshold","canvasOut","contextOut","putImageData","finalImage","toDataURL","FormGroup","Label","CustomInput","checked","event","target","inline","style","index","tempImages","imageIndex","findIndex","newImage","setOpacity","handleRemoveImgToCompare","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7cb91e2d.chunk.js","sourcesContent":["import qs from \"qs\";\r\nimport {\r\n  ArchiveExtendedInfo,\r\n  ArchiveSimpleInfo, ResultsContainer\r\n} from \"../types\";\r\n\r\nexport async function getArchiveSimpleList(simpleString: string): Promise<ArchiveSimpleInfo[]> {\r\n  const query = `/es-title-pk-suggest/?q=${simpleString}`;\r\n  const response = await fetch(query,\r\n    {\r\n      credentials: 'include',\r\n    });\r\n  return await response.json();\r\n}\r\n\r\nexport async function getArchivesInfo(pkList: string[]): Promise<ArchiveExtendedInfo[]> {\r\n  const currentSearch = {\r\n    archives: pkList,\r\n  }\r\n  const newParams = qs.stringify(currentSearch, { indices: false });\r\n  const query = `/api/?${newParams}`;\r\n  const response = await fetch(query,\r\n    {\r\n      credentials: 'include',\r\n    });\r\n  return await response.json();\r\n}\r\n\r\nexport async function getCompareArchivesInfo(algos: string[], pkList: string[]): Promise<ResultsContainer> {\r\n  const currentSearch = {\r\n    algos: algos,\r\n    pk: pkList,\r\n  }\r\n  const newParams = qs.stringify(currentSearch, { indices: false });\r\n  const query = `/compare-archives/?${newParams}`;\r\n  const response = await fetch(query,\r\n    {\r\n      credentials: 'include',\r\n    });\r\n  return await response.json();\r\n}\r\n\r\nexport async function getLiveThumbnail(pk: string, position: string, fetchFull: boolean): Promise<string> {\r\n  const query = `/live-image-thumbnail/${pk}/${position}/?base64=1&full=${fetchFull ? '1' : ''}`;\r\n  const response = await fetch(query,\r\n    {\r\n      credentials: 'include',\r\n    });\r\n  return await response.text();\r\n}","export function fileSizeIEC(bytes: number): string {\r\n  const exp = Math.log(bytes) / Math.log(1024) | 0;\r\n  const result = (bytes / (1024 ** exp)).toFixed(2);\r\n\r\n  return `${result} ${(exp === 0 ? 'bytes' : `${'KMGTPEZY'[exp - 1]}B`)}`;\r\n}\r\n\r\n// KiB,MiB,GiB,TiB,PiB,EiB,ZiB,YiB\r\n\r\nconst scopePriorities = ['language', 'artist', 'group', 'parody', 'character', 'female', 'male', 'mixed', 'other', 'misc'];\r\n\r\ntype sortedTagListType = [\r\n  string,\r\n  string[]\r\n]\r\n\r\nexport function sortTags(tagList: string[]): sortedTagListType[] {\r\n  const prioritizedTagList: sortedTagListType[] = [];\r\n\r\n  scopePriorities.forEach((x) => {\r\n    const matchedTags: string[] = tagList.filter(y => y.startsWith(`${x}:`)).map(z => z.replace(`${x}:`, '')).sort();\r\n    if (matchedTags.length > 0) {\r\n      prioritizedTagList.push([x, matchedTags] as sortedTagListType);\r\n    }\r\n  });\r\n  const remainingTags: string[] = tagList.filter(y => !scopePriorities.find(z => y.startsWith(`${z}:`))).sort();\r\n  if (remainingTags.length > 0) {\r\n    prioritizedTagList.push(['', remainingTags] as sortedTagListType);\r\n  }\r\n\r\n  return prioritizedTagList;\r\n}","import React from 'react';\r\nimport {ArrowContainer, Popover} from 'react-tiny-popover';\r\nimport {Spinner} from \"reactstrap\";\r\n\r\ntype Props = {\r\n  imageRenderer: () => Promise<JSX.Element>;\r\n  buttonContent: string;\r\n}\r\n\r\nfunction ImagePopover({ imageRenderer, buttonContent }: Props): JSX.Element {\r\n  const [isPopoverOpen, setIsPopoverOpen] = React.useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [image, setImage] = React.useState<JSX.Element>();\r\n  React.useEffect(() => {\r\n    if(isPopoverOpen && !image) {\r\n      setIsLoading(true);\r\n      imageRenderer().then(\r\n        (content) => {\r\n          setImage(content);\r\n          setIsLoading(false);\r\n        }\r\n      )\r\n    }\r\n  }, [image, imageRenderer, isPopoverOpen])\r\n  return (\r\n    <Popover\r\n      isOpen={isPopoverOpen}\r\n      padding={5}\r\n      positions={['right', 'left', 'bottom', 'top' ]}\r\n      content={({ position, childRect, popoverRect }) => (\r\n        <ArrowContainer\r\n          position={position}\r\n          childRect={childRect}\r\n          popoverRect={popoverRect}\r\n          arrowColor={'green'}\r\n          arrowSize={10}\r\n          arrowStyle={{ opacity: 1.0 }}\r\n          className='popover-arrow-container'\r\n          arrowClassName='popover-arrow'\r\n        >\r\n          {!isLoading && image ? image : <Spinner color=\"primary\" />}\r\n        </ArrowContainer>\r\n      )}\r\n    >\r\n      <button type=\"button\" className=\"btn btn-primary btn-sm\" onClick={() => setIsPopoverOpen(!isPopoverOpen)}>\r\n        {buttonContent}\r\n      </button>\r\n    </Popover>\r\n  );\r\n}\r\n\r\nexport default ImagePopover;","import React from 'react'\r\nimport {Container, Media, Row, Table as BTable} from 'reactstrap';\r\nimport cx from 'classnames';\r\nimport moment from 'moment';\r\nimport {ArchiveExtendedInfo, Results} from \"../types\";\r\nimport './ResultsTable.css';\r\nimport {fileSizeIEC, sortTags} from \"../core/utils\";\r\nimport {getLiveThumbnail} from \"../core/apiCalls\";\r\nimport ImagePopover from \"./ImagePopover\";\r\n\r\n\r\ninterface Table {\r\n  data: Results;\r\n  archives: ArchiveExtendedInfo[];\r\n  loading: boolean;\r\n  showMatchesOnly: boolean;\r\n  showNonMatchesOnly: boolean;\r\n  showImagesOnTop: boolean;\r\n  fetchFull: boolean;\r\n  handleAddImage: (image: JSX.Element, archivePk: string, imagePk: string) => void;\r\n}\r\n\r\ninterface SimilarInfo {\r\n  algorithm: string;\r\n  archive: string;\r\n  image: string;\r\n}\r\n\r\ninterface ExtraInfo {\r\n  current: boolean;\r\n  highlight: boolean;\r\n}\r\n\r\ninterface StaticInfo {\r\n  other: SimilarInfo[];\r\n}\r\n\r\ninterface ArchiveLevelInfo {\r\n  matchedImages: number;\r\n}\r\n\r\nconst getFinalHashClass = (staticInfo?: StaticInfo, extraInfo?: ExtraInfo) => {\r\n  if(extraInfo?.current) {\r\n    return 'current-highlight';\r\n  }\r\n  if(extraInfo?.highlight) {\r\n    return 'hash-highlight';\r\n  }\r\n  else if(staticInfo) {\r\n    if(staticInfo.other.length > 0) {\r\n      return 'hash-match';\r\n    }\r\n  }\r\n  return '';\r\n}\r\n\r\nconst getDateFromUnixString = (uniDate: number | null) => {\r\n  return uniDate ? moment.unix(uniDate).format('MM-DD-YYYY'): 'No';\r\n}\r\n\r\nexport default function ResultsTable({data, archives, loading, showMatchesOnly, showNonMatchesOnly, fetchFull, showImagesOnTop, handleAddImage}: Table) {\r\n\r\n  const [extraInfo, setExtraInfo] = React.useState<Map<string, ExtraInfo>>(new Map())\r\n  const [staticInfo, setStaticInfo] = React.useState<Map<string, StaticInfo>>(new Map())\r\n  const [staticArchiveInfo, setStaticArchiveInfo] = React.useState<Map<string, ArchiveLevelInfo>>(new Map())\r\n\r\n  const calculateSimilar = React.useCallback(() => {\r\n    const newStatic = new Map<string, StaticInfo>();\r\n    const newStaticArchiveInfo = new Map<string, ArchiveLevelInfo>();\r\n    Object.keys(data).forEach((algorithm) => (\r\n      Object.keys(data[algorithm].images).forEach((archivePk) => {\r\n        const localArchiveInfo = {matchedImages: 0};\r\n        Object.keys(data[algorithm].images[archivePk]).forEach((imagePk) => {\r\n          const otherArchives: SimilarInfo[] = [];\r\n          Object.keys(data[algorithm].images).filter(pk => pk !== archivePk).forEach(\r\n            (aPk) => {\r\n              Object.keys(data[algorithm].images[aPk])\r\n                .filter(iPk => data[algorithm].images[aPk][iPk] === data[algorithm].images[archivePk][imagePk])\r\n                .forEach(a => (otherArchives.push({algorithm: algorithm, archive: aPk, image: a})))\r\n            }\r\n          );\r\n          if (otherArchives.length > 0) {\r\n            const key = JSON.stringify({algorithm: algorithm, archive: archivePk, image: imagePk});\r\n            newStatic.set(key, {other: otherArchives});\r\n          }\r\n          localArchiveInfo.matchedImages += otherArchives.length;\r\n        });\r\n        const archiveKey = JSON.stringify({algorithm: algorithm, archive: archivePk});\r\n        newStaticArchiveInfo.set(archiveKey, localArchiveInfo);\r\n      })\r\n    ));\r\n    setStaticInfo(newStatic);\r\n    setStaticArchiveInfo(newStaticArchiveInfo);\r\n  }, [data]);\r\n\r\n  const initializeOtherInfo = React.useCallback(() => {\r\n    const newExtra = new Map<string, ExtraInfo>();\r\n    Object.keys(data).forEach((algorithm) => (\r\n      Object.keys(data[algorithm].images).forEach((archivePk) => (\r\n        Object.keys(data[algorithm].images[archivePk]).forEach((imagePk) => {\r\n          const key = JSON.stringify({algorithm: algorithm, archive: archivePk, image: imagePk})\r\n          newExtra.set(key, {current: false, highlight: false});\r\n        })\r\n      ))\r\n    ));\r\n    setExtraInfo(newExtra);\r\n  }, [data]);\r\n  \r\n  React.useEffect(() => {\r\n    calculateSimilar()\r\n  }, [calculateSimilar, data])\r\n\r\n  React.useEffect(() => {\r\n    initializeOtherInfo()\r\n  }, [initializeOtherInfo, data])\r\n\r\n  const highlightSimilar = (similarKey: string, highlight: boolean) => {\r\n    const similarImages = staticInfo.get(similarKey);\r\n    const currentExtra = extraInfo.get(similarKey);\r\n    if(currentExtra === undefined) {\r\n      extraInfo.set(similarKey, {current: highlight, highlight: false});\r\n    }\r\n    else {\r\n      currentExtra.highlight = false;\r\n      currentExtra.current = highlight;\r\n      extraInfo.set(similarKey, currentExtra);\r\n    }\r\n\r\n    if(similarImages) {\r\n      similarImages.other.forEach(\r\n        v => {\r\n          const key = JSON.stringify(v);\r\n          const currentInfo = extraInfo.get(key);\r\n          if(currentInfo === undefined) {\r\n            extraInfo.set(key, {current: false, highlight: highlight});\r\n          }\r\n          else {\r\n            currentInfo.highlight = highlight;\r\n            currentInfo.current = false;\r\n            extraInfo.set(key, currentInfo);\r\n          }\r\n        }\r\n      )\r\n      \r\n    }\r\n\r\n    setExtraInfo(new Map(extraInfo));\r\n\r\n  }\r\n\r\n  const getMatches = (staticInfo?: StaticInfo) => {\r\n    if(staticInfo) {\r\n      return staticInfo.other.map(\r\n        v => {\r\n          return <span className={\"mr-1\"} key={`${v.archive}-${v.image}`}>{`A: ${v.archive}, I: ${v.image}`}</span>;\r\n        }\r\n      );\r\n    }\r\n    return [];\r\n  }\r\n\r\n  const getAdditionalInfo = (key: string) => {\r\n    const currentArchiveInfo = staticArchiveInfo.get(key);\r\n    if(currentArchiveInfo) {\r\n      return currentArchiveInfo.matchedImages;\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  const getImageData = async (archivePk: string, imagePk: string, fetchFull: boolean) => {\r\n    const imageBase64 = await getLiveThumbnail(archivePk, imagePk, fetchFull);\r\n    return <img alt={imagePk} src={`${imageBase64}`}/>;\r\n  }\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      {\r\n        loading ? <div className=\"text-center\">Loading results, might take a while depending on algorithm...</div> :\r\n          <BTable bordered size=\"sm\" className={\"results-table\"}>\r\n            <thead>\r\n            <tr>\r\n              {Object.keys(data).map(algorithm => (\r\n                <th className=\"text-center\" colSpan={Object.keys(data[algorithm].images).length} key={algorithm}>\r\n                  {algorithm}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n            <tr>\r\n              {Object.keys(data).map(algorithm => (\r\n                Object.keys(data[algorithm].images).map(archivePk => {\r\n                  const localArchiveInfo = archives.find(a => a.id.toString() === archivePk);\r\n                  if (localArchiveInfo) {\r\n                    return <th key={archivePk} className={\"mid-content\"}>\r\n                      <Media>\r\n                        <Media left className={\"mr-2\"}>\r\n                          {\r\n                            localArchiveInfo.thumbnail ?\r\n                              <img src={localArchiveInfo.thumbnail} alt={localArchiveInfo.title}/> : null\r\n                          }\r\n                        </Media>\r\n                        <Media body>\r\n                          <Media heading>\r\n                            {localArchiveInfo.title}\r\n                          </Media>\r\n                          <div>\r\n                            {\"Link: \"}<a href={localArchiveInfo.url}>{`/archive/${archivePk}/`}</a>{\" | \"}\r\n                            {`Images: ${localArchiveInfo.filecount}`}{\" | \"}\r\n                            {`Size: ${fileSizeIEC(localArchiveInfo.filesize)}`}{\" | \"}\r\n                            {`Matches: ${getAdditionalInfo(JSON.stringify({algorithm: algorithm, archive: archivePk}))}`}\r\n                          </div>\r\n                          <div>\r\n                            {`Added: ${getDateFromUnixString(localArchiveInfo.create_date ? localArchiveInfo.create_date : localArchiveInfo.public_date)}`}{\" | \"}\r\n                            {`Posted: ${getDateFromUnixString(localArchiveInfo.posted)}`}{\" | \"}\r\n                            {`Public: ${getDateFromUnixString(localArchiveInfo.public_date)}`}\r\n                          </div>\r\n                          <div>\r\n                            {\r\n                              sortTags(localArchiveInfo.tags).map(\r\n                                tagGroup => <div key={tagGroup[0]}>\r\n                                  <Container>\r\n                                    <Row>\r\n                                      {tagGroup[0] ? <div className={\"mr-1\"}>{tagGroup[0] + ':'}</div> : ''}\r\n                                      {\r\n                                        tagGroup[1].map(\r\n                                          tag =>\r\n                                            <div className={\"tag-element mr-1\"} key={tag}>{tag}</div>\r\n                                        )\r\n                                      }\r\n                                    </Row>\r\n                                  </Container>\r\n                                  </div>\r\n                              )\r\n                            }\r\n                          </div>\r\n                        </Media>\r\n                      </Media>\r\n                    </th>;\r\n                  }\r\n                  else {\r\n                    return null;\r\n                  }\r\n              })\r\n              ))}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            <tr>\r\n              {Object.keys(data).map(algorithm => (\r\n                Object.keys(data[algorithm].images).map(archivePk => (\r\n                  <td key={archivePk} className={\"shaCell\"}>\r\n                    {\r\n                      <ul className=\"list-group\">\r\n                        {\r\n                          Object.keys(data[algorithm].images[archivePk]).map(imagePk => {\r\n                            const hashKey = JSON.stringify({algorithm: algorithm, archive: archivePk, image: imagePk});\r\n                            const currentStaticInfo = staticInfo.get(hashKey);\r\n                            if(\r\n                              (!showMatchesOnly || (currentStaticInfo && currentStaticInfo.other.length > 0)) &&\r\n                              (!showNonMatchesOnly || (currentStaticInfo === undefined || currentStaticInfo.other.length === 0))\r\n                            ) {\r\n                              return <li\r\n                                className={cx(\"list-group-item\", getFinalHashClass(currentStaticInfo, extraInfo.get(hashKey)))}\r\n                                key={imagePk}\r\n                                onMouseEnter={() => highlightSimilar(hashKey, true)}\r\n                                onMouseLeave={() => highlightSimilar(hashKey, false)}\r\n                              >\r\n                                {\r\n                                  showImagesOnTop ?\r\n                                    <button type=\"button\" className=\"btn btn-primary btn-sm\" onClick={() => getImageData(archivePk, imagePk, fetchFull).then(\r\n                                      (image) => handleAddImage(image, archivePk, imagePk)\r\n                                    )}>{imagePk}</button> :\r\n                                    <ImagePopover buttonContent={imagePk} imageRenderer={() => getImageData(archivePk, imagePk, fetchFull)}/>\r\n                                }\r\n\r\n                                {': '}<span>{data[algorithm].images[archivePk][imagePk]}</span>\r\n                                {\r\n                                  currentStaticInfo && currentStaticInfo.other.length > 0 ?\r\n                                    <span>{' > '} {getMatches(currentStaticInfo)}</span> : ''\r\n                                }\r\n                              </li>\r\n                            }\r\n                            else {\r\n                              return null;\r\n                            }\r\n\r\n                          }).filter(x => x != null)\r\n                        }\r\n                      </ul>\r\n                    }\r\n                  </td>\r\n                ))\r\n              ))}\r\n            </tr>\r\n            </tbody>\r\n          </BTable>\r\n      }\r\n  </>\r\n  )\r\n}","import React from 'react';\r\nimport ReactSelect from \"react-select\";\r\n\r\ntype HeaderProps = {\r\n  algorithms: string[];\r\n  availableAlgorithms: string[];\r\n  selectOption: (algorithms: string[]) => void;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst customStyles = {\r\n  menu: (provided: any, state: any) => ({\r\n    ...provided,\r\n    color: state.selectProps.menuColor,\r\n  }),\r\n}\r\n\r\nfunction AlgorithmSelect({ algorithms, availableAlgorithms, selectOption, isLoading }: HeaderProps): JSX.Element {\r\n  return (\r\n    <ReactSelect\r\n      value={algorithms.map(a => ({ value: a, label: a }))}\r\n      isClearable\r\n      isDisabled={isLoading}\r\n      isMulti\r\n      onChange={entries => {\r\n        selectOption(entries.map(a => (a.value)));\r\n      }}\r\n      options={availableAlgorithms.map(a => ({ value: a, label: a }))}\r\n      noOptionsMessage={() => null}\r\n      placeholder={\"Choose Algorithms...\"}\r\n      // @ts-ignore\r\n      menuColor='black'\r\n      styles={customStyles}\r\n    />\r\n  );\r\n}\r\n\r\nexport default AlgorithmSelect;","import React, {useState} from 'react';\r\nimport AsyncSelect from 'react-select/async';\r\nimport \"./ArchiveMultiSelect.css\";\r\nimport {getArchiveSimpleList} from \"../core/apiCalls\";\r\nimport {ArchiveSimpleInfo} from \"../types\";\r\n\r\ntype HeaderProps = {\r\n  isLoading: boolean;\r\n  archives: ArchiveSimpleInfo[];\r\n  selectOption: (archives: ArchiveSimpleInfo[]) => void;\r\n}\r\n\r\nconst customStyles = {\r\n  menu: (provided: any, state: any) => ({\r\n    ...provided,\r\n    color: state.selectProps.menuColor,\r\n  }),\r\n}\r\n\r\nfunction ArchiveMultiSelect({ archives, isLoading, selectOption }: HeaderProps): JSX.Element {\r\n  const [, setValue] = useState<string>('');\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  // handle input change event\r\n  const handleInputChange = (value: string) => {\r\n    setValue(value);\r\n  };\r\n\r\n  // load options using API call\r\n  const loadOptions = (inputValue: string) => {\r\n    setLoading(true);\r\n    const results = getArchiveSimpleList(inputValue);\r\n    setLoading(false);\r\n    return results;\r\n  };\r\n\r\n  return (\r\n    <AsyncSelect\r\n      // cacheOptions\r\n      isLoading={loading || isLoading}\r\n      isDisabled={loading || isLoading}\r\n      value={archives}\r\n      isClearable\r\n      isMulti\r\n      backspaceRemovesValue\r\n      getOptionLabel={(e: ArchiveSimpleInfo) => `${e.id}: ${e.title}`}\r\n      getOptionValue={(e: ArchiveSimpleInfo) => e.id}\r\n      loadOptions={loadOptions}\r\n      onInputChange={handleInputChange}\r\n      onChange={entries => {\r\n        selectOption(entries.map(entry => (entry)));\r\n      }}\r\n      noOptionsMessage={() => null}\r\n      placeholder={\"Choose Archives...\"}\r\n      // @ts-ignore\r\n      menuColor='black'\r\n      styles={customStyles}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ArchiveMultiSelect;","import React from 'react';\r\nimport qs from \"qs\";\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport {\r\n  Results,\r\n  fetchDataParams,\r\n  ResultsContainer,\r\n  ArchiveSimpleInfo,\r\n  ArchiveExtendedInfo,\r\n  ImageCompare\r\n} from \"./types\";\r\nimport {getArchivesInfo, getCompareArchivesInfo} from \"./core/apiCalls\";\r\nimport ResultsTable from \"./components/ResultsTable\";\r\nimport AlgorithmSelect from \"./components/AlgorithmSelect\";\r\nimport ArchiveMultiSelect from \"./components/ArchiveMultiSelect\";\r\nimport {CustomInput, FormGroup, Label} from \"reactstrap\";\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport pixelmatch from 'pixelmatch';\r\n\r\ninterface MatchModes {\r\n  MatchesOnly: boolean;\r\n  NonMatchesOnly: boolean;\r\n}\r\n\r\nfunction App() {\r\n\r\n  const availableAlgorithms = [\r\n    'sha1',\r\n    'phash',\r\n    'ahash',\r\n    'dhash',\r\n    'whash-haar',\r\n    'whash-db4',\r\n    'colorhash',\r\n  ]\r\n\r\n  const [resultData, setResultData] = React.useState<Results>({})\r\n  const [algorithms, setAlgorithms] = React.useState<string[]>([])\r\n  const [archives, setArchives] = React.useState<ArchiveSimpleInfo[]>([])\r\n  const [archivesExtended, setArchivesExtended] = React.useState<ArchiveExtendedInfo[]>([])\r\n  const [matchModes, setMatchModes] = React.useState<MatchModes>({MatchesOnly: false, NonMatchesOnly: false})\r\n  const [fetchImageFull, setFetchImageFull] = React.useState<boolean>(false)\r\n  const [imagesToCompare, setImagesToCompare] = React.useState<ImageCompare[]>([])\r\n  const [showImagesOnTop, setImagesOnTop] = React.useState<boolean>(false)\r\n  const [showDifference, setShowDifference] = React.useState<boolean>(false)\r\n  const [comparedImage, setComparedImage] = React.useState<JSX.Element | null>(null)\r\n  const [loading, setLoading] = React.useState(false)\r\n  const [error, setError] = React.useState('')\r\n\r\n  const fetchInitialData = () => {\r\n\r\n    const currentSearchParams = qs.parse(window.location.search, { ignoreQueryPrefix: true });\r\n\r\n    let startingAlgos;\r\n    if(currentSearchParams.algos !== undefined) {\r\n      if(Array.isArray(currentSearchParams.algos)) {\r\n        startingAlgos = currentSearchParams.algos.map(a => a.toString());\r\n      }\r\n      else if(typeof currentSearchParams.algos === 'string') {\r\n        startingAlgos = [currentSearchParams.algos];\r\n      }\r\n      else {\r\n        startingAlgos = ['sha1']\r\n      }\r\n    }\r\n    else {\r\n      startingAlgos = ['sha1']\r\n    }\r\n\r\n    setAlgorithms(startingAlgos);\r\n\r\n    let startingArchives: string[];\r\n    if(currentSearchParams.archives !== undefined) {\r\n      if(Array.isArray(currentSearchParams.archives)) {\r\n        startingArchives = currentSearchParams.archives.map(a => a.toString());\r\n      }\r\n      else if(typeof currentSearchParams.archives === 'string') {\r\n        startingArchives = [currentSearchParams.archives];\r\n      }\r\n      else {\r\n        startingArchives = []\r\n      }\r\n    }\r\n    else {\r\n      startingArchives = []\r\n    }\r\n\r\n    const startingMatchModes: MatchModes = {\r\n      MatchesOnly: false,\r\n      NonMatchesOnly: false\r\n    }\r\n\r\n    if(currentSearchParams.matchesOnly !== undefined) {\r\n      startingMatchModes.MatchesOnly = true;\r\n    }\r\n\r\n    if(currentSearchParams.nonMatchesOnly !== undefined) {\r\n      startingMatchModes.NonMatchesOnly = true;\r\n    }\r\n\r\n    setMatchModes(startingMatchModes);\r\n\r\n    if(currentSearchParams.fetchFull !== undefined) {\r\n      setFetchImageFull(true);\r\n    }\r\n\r\n    if(currentSearchParams.showOnTop !== undefined) {\r\n      setImagesOnTop(true);\r\n    }\r\n\r\n    if (startingAlgos.length < 1 || startingArchives.length < 1) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    getArchivesInfo(\r\n      startingArchives\r\n    )\r\n      .then((data: ArchiveExtendedInfo[]) => {\r\n        setArchives(data);\r\n        setArchivesExtended(data);\r\n        setLoading(false);\r\n        setError('');\r\n      })\r\n      .catch(error => {\r\n        setLoading(false);\r\n        setError(error.message);\r\n      });\r\n\r\n  }\r\n\r\n  const fetchData = React.useCallback(({ algos, pk }: fetchDataParams) => {\r\n\r\n    if (algos.length < 1 || pk.length < 1) {\r\n      setResultData({});\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    getCompareArchivesInfo(algos, pk)\r\n      .then((data: ResultsContainer) => {\r\n        setResultData(data.results);\r\n        setLoading(false);\r\n        setError('');\r\n      })\r\n      .catch(error => {\r\n        setLoading(false);\r\n        setError(error.message);\r\n      });\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    fetchInitialData()\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    fetchData({ algos: algorithms, pk: archives.map(a => (a.id)) })\r\n  }, [algorithms, archives, fetchData])\r\n\r\n  const fetchExtendedData = React.useCallback((pks: string[]) => {\r\n\r\n    if (pks.length < 1) {\r\n      setArchivesExtended([]);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    getArchivesInfo(\r\n      pks\r\n    )\r\n      .then((data: ArchiveExtendedInfo[]) => {\r\n        setArchivesExtended(data);\r\n        setLoading(false);\r\n        setError('');\r\n      })\r\n      .catch(error => {\r\n        setLoading(false);\r\n        setError(error.message);\r\n      });\r\n  }, [])\r\n\r\n  // React.useEffect(() => {\r\n  //   fetchExtendedData(archives.map(a => (a.id)))\r\n  // }, [archives, fetchExtendedData])\r\n\r\n  const handleArchivesChosen = (archives: ArchiveSimpleInfo[]) => {\r\n    setArchives(archives);\r\n    fetchExtendedData(archives.map(a => (a.id)));\r\n  }\r\n\r\n  const handleAlgorithmsChange = (algorithms: string[]) => {\r\n    setAlgorithms(algorithms);\r\n  }\r\n\r\n  const handleMatchesOnlyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    matchModes.MatchesOnly = event.target.checked;\r\n    if(event.target.checked) {\r\n      matchModes.NonMatchesOnly = !event.target.checked;\r\n    }\r\n    setMatchModes({...matchModes});\r\n  }\r\n\r\n  const handleNonMatchesOnlyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if(event.target.checked) {\r\n      matchModes.MatchesOnly = !event.target.checked;\r\n    }\r\n    matchModes.NonMatchesOnly = event.target.checked;\r\n    setMatchModes({...matchModes});\r\n  }\r\n\r\n  const handleFetchFull = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFetchImageFull(event.target.checked);\r\n  }\r\n\r\n  const handleShowOnTop = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setImagesOnTop(event.target.checked);\r\n  }\r\n\r\n  const handleShowDifference = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setShowDifference(event.target.checked);\r\n  }\r\n\r\n  const handleAddImgToCompare = (image: JSX.Element, archivePk: string, imagePk: string) => {\r\n    const newImage: ImageCompare = {id: `${archivePk}-${imagePk}`, image: image, opacity: 1, archivePk: archivePk, imagePk: imagePk};\r\n    setImagesToCompare([...imagesToCompare, newImage]);\r\n  }\r\n\r\n  const handleRemoveImgToCompare = (image: ImageCompare) => {\r\n    let tempImages = imagesToCompare.filter(x => x.id !== image.id);\r\n    setImagesToCompare(tempImages);\r\n  }\r\n\r\n  const handleClearImgToCompare = () => {\r\n    setImagesToCompare([]);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if(showDifference) {\r\n      reduceImagesToCompare(imagesToCompare);\r\n    }\r\n  }, [imagesToCompare, showDifference])\r\n\r\n  const reduceImagesToCompare = (imagesToCompare : ImageCompare[]) => {\r\n\r\n    if(imagesToCompare.length < 2) {\r\n      setComparedImage(null);\r\n      return null;\r\n    }\r\n\r\n    const imageA = new Image();\r\n    imageA.src = imagesToCompare[0].image.props.src;\r\n    const imageB = new Image();\r\n\r\n    imageB.onload = () => {\r\n      const height = imageA.height;\r\n      const width = imageA.width;\r\n\r\n      if(imageA.height === 0 || imageB.height === 0) {\r\n        setComparedImage(null);\r\n        return null;\r\n      }\r\n\r\n      const canvasA = document.createElement(\"canvas\");\r\n      const contextA = canvasA.getContext(\"2d\");\r\n      const canvasB = document.createElement(\"canvas\");\r\n      const contextB = canvasB.getContext(\"2d\");\r\n\r\n      canvasA.width = imageA.width;\r\n      canvasA.height = imageA.height;\r\n      canvasB.width = imageB.width;\r\n      canvasB.height = imageB.height;\r\n\r\n      if(contextA === null || contextB === null) {\r\n        setComparedImage(null);\r\n        return null;\r\n      }\r\n\r\n      contextA.drawImage(imageA, 0, 0);\r\n      contextB.drawImage(imageB, 0, 0);\r\n\r\n      let imgDataA = contextA.getImageData(0,0,imageA.width, imageA.height);\r\n      let imgDataB = contextB.getImageData(0,0, imageB.width, imageB.height);\r\n\r\n      const imgDataOutput = new ImageData(width, height);\r\n\r\n      pixelmatch(imgDataA.data, imgDataB.data, imgDataOutput.data, width, height, {threshold: 0.0});\r\n\r\n      const canvasOut = document.createElement(\"canvas\");\r\n      const contextOut = canvasOut.getContext(\"2d\");\r\n\r\n      canvasOut.width = width;\r\n      canvasOut.height = height;\r\n\r\n      if(contextOut === null) {\r\n        setComparedImage(null);\r\n        return null;\r\n      }\r\n\r\n      contextOut.putImageData(imgDataOutput, 0, 0);\r\n\r\n      const finalImage = <img src={canvasOut.toDataURL()} alt={'result'}/>;\r\n\r\n      setComparedImage(finalImage);\r\n\r\n    };\r\n\r\n    imageB.src = imagesToCompare[1].image.props.src;\r\n\r\n  }\r\n\r\n  const setOpacity = (image: ImageCompare, opacity: number) => {\r\n    let tempImages = [...imagesToCompare];\r\n    const imageIndex = tempImages.findIndex(x => x.id === image.id);\r\n    if (imageIndex === -1)\r\n      return;\r\n    const newImage: ImageCompare = {...tempImages[imageIndex]};\r\n    newImage.opacity = opacity/100;\r\n    tempImages[imageIndex] = newImage;\r\n    setImagesToCompare(tempImages);\r\n  }\r\n\r\n  return (\r\n    <main className=\"App\">\r\n      <div>\r\n        <ArchiveMultiSelect archives={archives} selectOption={handleArchivesChosen} isLoading={loading} />\r\n        <AlgorithmSelect\r\n          algorithms={algorithms}\r\n          selectOption={handleAlgorithmsChange}\r\n          availableAlgorithms={availableAlgorithms}\r\n          isLoading={loading}\r\n        />\r\n        {\r\n          error ? <div className=\"text-center\">{error}</div> : null\r\n        }\r\n        <FormGroup>\r\n          <Label>Options</Label>\r\n          <div>\r\n            <CustomInput\r\n              type=\"switch\"\r\n              label=\"Show Matches Only\"\r\n              checked={matchModes.MatchesOnly}\r\n              onChange={handleMatchesOnlyChange}\r\n              id=\"matchesOnly\"\r\n              inline\r\n            />\r\n            <CustomInput\r\n              type=\"switch\"\r\n              label=\"Show Non-Matches Only\"\r\n              checked={matchModes.NonMatchesOnly}\r\n              onChange={handleNonMatchesOnlyChange}\r\n              id=\"nonMatchesOnly\"\r\n              inline\r\n            />\r\n            <CustomInput\r\n              type=\"switch\"\r\n              label=\"Fetch Full Images\"\r\n              checked={fetchImageFull}\r\n              onChange={handleFetchFull}\r\n              id=\"fetchFull\"\r\n              inline\r\n            />\r\n            <CustomInput\r\n              type=\"switch\"\r\n              label=\"Compare Images on Top\"\r\n              checked={showImagesOnTop}\r\n              onChange={handleShowOnTop}\r\n              id=\"showOnTop\"\r\n              inline\r\n            />\r\n            <CustomInput\r\n              type=\"switch\"\r\n              label=\"Differential Image (first two, red color)\"\r\n              checked={showDifference}\r\n              onChange={handleShowDifference}\r\n              id=\"showDifference\"\r\n              inline\r\n            />\r\n          </div>\r\n        </FormGroup>\r\n        {\r\n          showImagesOnTop ? <div>\r\n            <div className={\"row\"}>\r\n              <div className=\"col d-flex justify-content-center\">\r\n                <div className=\"compare-container\">\r\n                  {\r\n                    showDifference ?\r\n                      comparedImage\r\n                       : null\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className={\"row\"}>\r\n              <div className=\"col d-flex justify-content-center\">\r\n                <div className=\"compare-container\">\r\n                  {\r\n                    imagesToCompare.map(a => <div key={a.id} className=\"compare-inner\" style={{opacity: a.opacity}}>{a.image}</div>)\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className={\"row\"}>\r\n              <div className=\"col d-flex justify-content-center\">\r\n                <div className=\"container\">\r\n                  {\r\n                    imagesToCompare.map(\r\n                      (a, index) => <div key={a.id} className=\"row justify-content-center\">\r\n                        <div className=\"col-5\">\r\n                          <div className=\"row op-bordered justify-content-center\">\r\n                            <div className=\"col-5\">{`${index}: A: ${a.archivePk}, I: ${a.imagePk}`}</div>\r\n                            <div className=\"col-6\"><Slider value={a.opacity*100} onChange={(x) => setOpacity(a, x as number)}/></div>\r\n                            <div className=\"col-1 d-flex justify-content-center\"><button type=\"button\" className=\"btn btn-primary btn-sm rounded-circle mx-0\" onClick={() => handleRemoveImgToCompare(a)}>{'X'}</button></div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className={\"row\"}>\r\n              <div className=\"col d-flex justify-content-center\">\r\n                <button type=\"button\" className=\"btn btn-primary btn-sm\" onClick={() => handleClearImgToCompare()}>{'Clear'}</button>\r\n              </div>\r\n            </div>\r\n          </div> : null\r\n        }\r\n        <ResultsTable\r\n          data={resultData}\r\n          archives={archivesExtended}\r\n          loading={loading}\r\n          showMatchesOnly={matchModes.MatchesOnly}\r\n          showNonMatchesOnly={matchModes.NonMatchesOnly}\r\n          fetchFull={fetchImageFull}\r\n          showImagesOnTop={showImagesOnTop}\r\n          handleAddImage={handleAddImgToCompare}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}