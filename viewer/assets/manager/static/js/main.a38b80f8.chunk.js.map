{"version":3,"sources":["components/IndeterminateCheckbox.tsx","components/ArchiveTable.tsx","App.tsx","core/utils.tsx","reportWebVitals.ts","index.tsx"],"names":["IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","combinedRef","refs","targetRef","React","useRef","useEffect","forEach","current","useCombinedRefs","Fragment","type","ArchiveTable","columns","data","fetchData","loading","controlledPageCount","pageCount","totalResults","skipPageReset","useTable","initialState","pageIndex","manualPagination","manualSortBy","autoResetPage","autoResetSortBy","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","allColumns","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","getToggleHideAllColumnsProps","state","pageSize","sortBy","onFetchDataDebounced","useAsyncDebounce","Pagination","className","onClick","disabled","length","defaultValue","onChange","e","target","value","Number","style","width","map","name","column","getToggleHiddenProps","id","bordered","size","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","row","getRowProps","cells","cell","getCellProps","colSpan","App","useMemo","Header","accessor","Cell","href","original","url","bytes","exp","Math","log","result","toFixed","fileSizeIEC","moment","unix","format","gallery","disableSortBy","useState","setData","setLoading","params","setParams","setPageCount","resultTotal","setResultTotal","fetchIdRef","skipPageResetRef","useCallback","currentSearch","qs","parse","ignoreQueryPrefix","String","sort_by","JSON","stringify","newParams","indices","newUrl","fetchId","fetch","then","response","json","console","results","num_pages","count","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a38b80f8.chunk.js","sourcesContent":["import React, { useEffect, forwardRef } from 'react';\r\n\r\ninterface Props {\r\n  indeterminate?: boolean;\r\n  name: string;\r\n}\r\n\r\nconst useCombinedRefs = (...refs: any[]): React.MutableRefObject<any> => {\r\n  const targetRef = React.useRef();\r\n\r\n  React.useEffect(() => {\r\n    refs.forEach(ref => {\r\n      if (!ref) return;\r\n\r\n      if (typeof ref === 'function') {\r\n        ref(targetRef.current);\r\n      } else {\r\n        ref.current = targetRef.current;\r\n      }\r\n    });\r\n  }, [refs]);\r\n\r\n  return targetRef;\r\n};\r\n\r\nconst IndeterminateCheckbox = forwardRef<HTMLInputElement, Props>(\r\n  ({ indeterminate, ...rest }, ref: React.Ref<HTMLInputElement>) => {\r\n    const defaultRef = React.useRef(null);\r\n    const combinedRef = useCombinedRefs(ref, defaultRef);\r\n\r\n    useEffect(() => {\r\n      if (combinedRef?.current) {\r\n        combinedRef.current.indeterminate = indeterminate ?? false;\r\n      }\r\n    }, [combinedRef, indeterminate]);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <input type=\"checkbox\" ref={combinedRef} {...rest} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n);\r\n\r\nexport default IndeterminateCheckbox;","import React from 'react'\r\nimport { Table as BTable } from 'reactstrap';\r\nimport {useTable, Column, usePagination, useSortBy, Row, useAsyncDebounce} from 'react-table';\r\nimport {Archive, fetchDataParams} from \"../types\";\r\nimport IndeterminateCheckbox from \"./IndeterminateCheckbox\";\r\n\r\n\r\ninterface Table<T extends object> {\r\n  columns: Array<Column<T>>;\r\n  data: T[];\r\n  fetchData: ({ pageSize, pageIndex, sortBy }: fetchDataParams) => void;\r\n  skipPageReset?: boolean | undefined;\r\n  pageCount?: number;\r\n  totalResults?: number;\r\n  loading: boolean;\r\n}\r\n\r\nexport default function ArchiveTable({\r\n                                       columns,\r\n                                       data,\r\n                                       fetchData,\r\n                                       loading,\r\n                                       pageCount: controlledPageCount,\r\n                                       totalResults,\r\n                                       skipPageReset = false,\r\n}: Table<Archive>) {\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    allColumns,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    getToggleHideAllColumnsProps,\r\n    // Get the state from the instance\r\n    state: { pageIndex, pageSize, sortBy },\r\n  } = useTable<Archive>(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0 }, // Pass our hoisted table state\r\n      manualPagination: true, // Tell the usePagination\r\n      // hook that we'll handle our own data fetching\r\n      // This means we'll also have to provide our own\r\n      // pageCount.\r\n      manualSortBy: true,\r\n      pageCount: controlledPageCount,\r\n      autoResetPage: !skipPageReset,\r\n      autoResetSortBy: !skipPageReset,\r\n      // autoResetFilters: !skipPageReset,\r\n    },\r\n    useSortBy,\r\n    usePagination,\r\n  )\r\n\r\n  const onFetchDataDebounced = useAsyncDebounce(fetchData, 50);\r\n\r\n  React.useEffect(() => {\r\n    onFetchDataDebounced({ pageIndex, pageSize, sortBy })\r\n  }, [onFetchDataDebounced, pageIndex, pageSize, sortBy])\r\n\r\n  const Pagination = <div className=\"pagination\">\r\n    <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n      {'<<'}\r\n    </button>{' '}\r\n    <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n      {'<'}\r\n    </button>{' '}\r\n    <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n      {'>'}\r\n    </button>{' '}\r\n    <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n      {'>>'}\r\n    </button>{' '}\r\n    <span>\r\n          Page{' '}\r\n      <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n    <span>\r\n          | Go to page:{' '}\r\n      <input\r\n        type=\"number\"\r\n        defaultValue={pageIndex + 1}\r\n        onChange={e => {\r\n          const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n          gotoPage(page)\r\n        }}\r\n        style={{ width: '100px' }}\r\n      />\r\n        </span>{' '}\r\n    <select\r\n      value={pageSize}\r\n      onChange={e => {\r\n        setPageSize(Number(e.target.value))\r\n      }}\r\n    >\r\n      {[10, 20, 50, 100].map(pageSize => (\r\n        <option key={pageSize} value={pageSize}>\r\n          Show {pageSize}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  </div>\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      <div>\r\n        <div>\r\n          <IndeterminateCheckbox name={'all'} {...getToggleHideAllColumnsProps()} /> Toggle\r\n          All\r\n        </div>\r\n        {allColumns.map(column => (\r\n          <div key={column.id}>\r\n            <label>\r\n              <input type=\"checkbox\" {...column.getToggleHiddenProps()} />{' '}\r\n              {column.id}\r\n            </label>\r\n          </div>\r\n        ))}\r\n        <br />\r\n      </div>\r\n      <div>\r\n        {Pagination}\r\n        <div>\r\n          {loading ? (\r\n            // Use our custom loading state to show a loading indicator\r\n            <div>Loading...</div>\r\n          ) : (\r\n            <div>\r\n              Showing {page.length} of {totalResults || 0}{' '}\r\n              results\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    <BTable bordered size=\"sm\" className={\"generic-table\"} {...getTableProps()}>\r\n      <thead>\r\n      {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()}>\r\n          {headerGroup.headers.map(column => (\r\n            <th {...column.getHeaderProps()}>\r\n              <div>\r\n                <span {...column.getSortByToggleProps()}>\r\n                                            {column.render('Header')}\r\n                  {/* Add a sort direction indicator */}\r\n                  {column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ''}\r\n                                        </span>\r\n              </div>\r\n              {/* Render the columns filter UI */}\r\n              <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n      {page.map((row: Row<Archive>) => {\r\n        prepareRow(row)\r\n        return (\r\n          <tr {...row.getRowProps()}>\r\n            {row.cells.map(cell => {\r\n              return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n            })}\r\n          </tr>\r\n        )\r\n      })}\r\n      <tr>\r\n        {loading ? (\r\n          // Use our custom loading state to show a loading indicator\r\n          <td colSpan={10000}>Loading...</td>\r\n        ) : (\r\n          <td colSpan={10000}>\r\n            Showing {page.length} of {totalResults || 0}{' '}\r\n            results\r\n          </td>\r\n        )}\r\n      </tr>\r\n      </tbody>\r\n    </BTable>\r\n      {Pagination}\r\n  </>\r\n  )\r\n}","import React from 'react';\r\nimport {CellProps, Column} from 'react-table';\r\nimport './App.css';\r\nimport {Archive, ArchiveContainer, fetchDataParams} from \"./types\";\r\nimport ArchiveTable from \"./components/ArchiveTable\";\r\nimport qs from \"qs\";\r\nimport moment from 'moment';\r\nimport {fileSizeIEC} from \"./core/utils\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const columns: Array<Column<Archive>> = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Archive',\r\n        columns: [\r\n          {\r\n            Header: 'Id',\r\n            accessor: 'id',\r\n            Cell: ({ row }: CellProps<Archive>) => (\r\n              <div>\r\n                {<a href={row.original.url}>{row.original.id}</a>}\r\n              </div>\r\n            ),\r\n          },\r\n          {\r\n            Header: 'Title',\r\n            accessor: 'title',\r\n          },\r\n          {\r\n            Header: 'Count',\r\n            accessor: 'filecount',\r\n          },\r\n          {\r\n            Header: 'Size',\r\n            accessor: 'filesize',\r\n            Cell: ({ value }) => {\r\n              return fileSizeIEC(value);\r\n            },\r\n          },\r\n          {\r\n            Header: 'Public Date',\r\n            accessor: 'public_date',\r\n            Cell: ({ value }) => {\r\n              return value ? moment.unix(value).format('MM-DD-YYYY'): 'Empty';\r\n            },\r\n          },\r\n          {\r\n            Header: 'Create Date',\r\n            accessor: 'create_date',\r\n            Cell: ({ value }) => {\r\n              return value ? moment.unix(value).format('MM-DD-YYYY'): 'Empty';\r\n            },\r\n          },\r\n          {\r\n            Header: 'Last Modified',\r\n            accessor: 'last_modified',\r\n            Cell: ({ value }) => {\r\n              return value ? moment.unix(value).format('MM-DD-YYYY'): 'Empty';\r\n            },\r\n          },\r\n          {\r\n            Header: 'Source',\r\n            accessor: 'source_type',\r\n          },\r\n          {\r\n            Header: 'Reason',\r\n            accessor: 'reason',\r\n          },\r\n          // {\r\n          //   Header: 'Download',\r\n          //   accessor: 'download',\r\n          //   disableSortBy: true\r\n          // },\r\n          // {\r\n          //   Header: 'Thumbnail',\r\n          //   accessor: 'thumbnail',\r\n          //   disableSortBy: true\r\n          // },\r\n        ],\r\n      },\r\n      // {\r\n      //   Header: 'Tags',\r\n      //   accessor: 'tags',\r\n      // },\r\n      // {\r\n      //   Header: 'Manage Entries',\r\n      //   accessor: 'manage_entries',\r\n      // },\r\n      {\r\n        Header: 'Gallery',\r\n        columns: [\r\n          {\r\n            Header: 'Id',\r\n            accessor: 'gallery.id',\r\n            Cell: ({ row }: CellProps<Archive>) => (\r\n              <div>\r\n                {row.original.gallery ? <a href={row.original.gallery.url}>{row.original.gallery.id}</a> : ''}\r\n              </div>\r\n            ),\r\n          },\r\n          {\r\n            Header: 'Link',\r\n            accessor: 'gallery.link',\r\n            Cell: ({ value }: CellProps<Archive>) => {\r\n              return <a href={value}>{value}</a>;\r\n            },\r\n            disableSortBy: true\r\n          },\r\n        ]\r\n      },\r\n    ],\r\n    []\r\n  )\r\n\r\n  const baseURL = '/manage-archives/?'\r\n\r\n  // We'll start our table without any data\r\n  const [data, setData] = React.useState<Archive[]>([])\r\n  const [loading, setLoading] = React.useState(false)\r\n  const [params, setParams] = React.useState('json=1')\r\n  const [pageCount, setPageCount] = React.useState(0)\r\n  const [resultTotal, setResultTotal] = React.useState(0)\r\n  const fetchIdRef = React.useRef(0)\r\n\r\n  const skipPageResetRef = React.useRef(false);\r\n\r\n  const fetchData = React.useCallback(({ pageSize, pageIndex, sortBy }: fetchDataParams) => {\r\n    // This will get called when the table needs new data\r\n    // You could fetch your data from literally anywhere,\r\n    // even a server. But for this example, we'll just fake it.\r\n    skipPageResetRef.current = true;\r\n    const currentSearch = qs.parse(params, { ignoreQueryPrefix: true });\r\n    currentSearch.page = String(pageIndex + 1);\r\n    currentSearch.size = String(pageSize);\r\n    if (sortBy.length > 0)\r\n      currentSearch.sort_by = JSON.stringify(sortBy);\r\n\r\n    const newParams = qs.stringify(currentSearch, { indices: false });\r\n    const newUrl = `${baseURL}${newParams}`\r\n\r\n    setParams(newParams)\r\n\r\n    // Give this fetch an ID\r\n    const fetchId = ++fetchIdRef.current\r\n\r\n    // Set the loading state\r\n    setLoading(true)\r\n\r\n    fetch(newUrl)\r\n      .then(response => response.json())\r\n      .then((data: ArchiveContainer) => {\r\n        if (fetchId === fetchIdRef.current) {\r\n          console.log(data.results);\r\n          setData(data.results);\r\n          setPageCount(data.num_pages);\r\n          setResultTotal(data.count);\r\n          setLoading(false);\r\n        }\r\n      });\r\n  }, [params])\r\n\r\n  React.useEffect(() => {\r\n    skipPageResetRef.current = false;\r\n  }, [data]);\r\n\r\n  return (\r\n    <main className=\"App\">\r\n      <div>\r\n        <ArchiveTable\r\n          columns={columns}\r\n          data={data}\r\n          fetchData={fetchData}\r\n          loading={loading}\r\n          pageCount={pageCount}\r\n          totalResults={resultTotal}\r\n          skipPageReset={skipPageResetRef.current}\r\n        />\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default App;","/* eslint no-bitwise: [\"error\", { \"int32Hint\": true }] */\r\n\r\nexport function fileSizeIEC(bytes: number): string {\r\n  const exp = Math.log(bytes) / Math.log(1024) | 0;\r\n  const result = (bytes / (1024 ** exp)).toFixed(2);\r\n\r\n  return `${result} ${(exp === 0 ? 'bytes' : `${'KMGTPEZY'[exp - 1]}B`)}`;\r\n}\r\n// KiB,MiB,GiB,TiB,PiB,EiB,ZiB,YiB\r\n\r\nconst scopePriorities = ['language', 'artist', 'group', 'parody', 'character', 'female', 'male', 'misc'];\r\n\r\ntype sortedTagListType = [\r\n  string,\r\n  string[]\r\n]\r\n\r\nexport function sortTags(tagList: string[]): sortedTagListType[] {\r\n  const prioritizedTagList = [];\r\n\r\n  scopePriorities.forEach((x) => {\r\n    const matchedTags: string[] = tagList.filter(y => y.startsWith(`${x}:`)).sort();\r\n    if (matchedTags.length > 0) {\r\n      prioritizedTagList.push([x, matchedTags] as sortedTagListType);\r\n    }\r\n  });\r\n  const remainingTags: string[] = tagList.filter(y => scopePriorities.find(z => y.startsWith(`${z}:`))).sort();\r\n  if (remainingTags.length > 0) {\r\n    prioritizedTagList.push(['', remainingTags] as sortedTagListType);\r\n  }\r\n\r\n  return prioritizedTagList;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}